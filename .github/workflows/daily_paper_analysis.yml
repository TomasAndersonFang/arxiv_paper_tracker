name: Daily Paper Analysis
on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 时间 00:00 运行
  workflow_dispatch:  # 允许手动触发

jobs:
  analyze-papers:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        # 完全禁用缓存
    
    - name: 🔍 Diagnose requirements files
      run: |
        echo "=== 🔍 Searching for ALL requirements.txt files ==="
        find . -name "requirements*.txt" -type f
        echo ""
        
        echo "=== 📄 Content of ./requirements.txt ==="
        if [ -f "./requirements.txt" ]; then
          cat ./requirements.txt
          echo "File size: $(wc -l < ./requirements.txt) lines"
          echo "File hash: $(md5sum ./requirements.txt)"
        else
          echo "❌ ./requirements.txt not found!"
        fi
        echo ""
        
        echo "=== 📄 Content of ALL found requirements files ==="
        find . -name "requirements*.txt" -type f -exec echo "--- 📄 {} ---" \; -exec cat {} \; -exec echo "" \;
        
        echo "=== 🌿 Git status ==="
        git status
        
        echo "=== 📝 Git log (last 3 commits) ==="
        git log --oneline -3
    
    - name: 🧹 Complete cache elimination and fresh installation
      run: |
        echo "=== 🧹 Completely eliminating all caches ==="
        
        # 删除所有可能的pip缓存位置
        python -m pip cache purge
        rm -rf ~/.cache/pip* ~/.pip /tmp/pip* 2>/dev/null || true
        sudo rm -rf /root/.cache/pip* 2>/dev/null || true
        
        # 删除GitHub Actions特有的缓存
        rm -rf /opt/hostedtoolcache/Python/*/x64/lib/python*/site-packages/pip/_internal/cache 2>/dev/null || true
        rm -rf /opt/hostedtoolcache/pip_cache 2>/dev/null || true
        
        # 清除可能影响缓存的环境变量
        unset PIP_CACHE_DIR PIP_FIND_LINKS PIP_EXTRA_INDEX_URL
        export PIP_NO_CACHE_DIR=1
        export PIP_DISABLE_PIP_VERSION_CHECK=1
        
        echo "=== ⬆️ Upgrading pip without cache ==="
        python -m pip install --upgrade pip --no-cache-dir --force-reinstall
        
        echo "=== 🗑️ Uninstalling existing packages ==="
        pip freeze | grep -v "^pip==" | grep -v "^setuptools==" | grep -v "^wheel==" > current_packages.txt || true
        if [ -s current_packages.txt ]; then
          echo "Uninstalling:"
          cat current_packages.txt
          pip uninstall -y -r current_packages.txt || true
        fi
        
        echo "=== ✅ Verification: packages after cleanup ==="
        pip list --format=freeze
        
        echo "=== 🚀 Installing with maximum freshness ==="
        # 使用多重保险的安装方式
        pip install --no-cache-dir \
                   --force-reinstall \
                   --no-deps \
                   --index-url https://pypi.org/simple/ \
                   --disable-pip-version-check \
                   -r requirements.txt
        
        echo "=== 🔄 Installing dependencies ==="
        pip install --no-cache-dir \
                   --force-reinstall \
                   --index-url https://pypi.org/simple/ \
                   --disable-pip-version-check \
                   -r requirements.txt
        
        echo "=== 📦 Final package verification ==="
        pip list --format=freeze
    
    - name: 🎯 Hardcoded version installation (fallback)
      if: failure()
      run: |
        echo "=== 🎯 Using hardcoded versions as fallback ==="
        
        # 如果上面失败，直接使用您期望的版本
        pip install --no-cache-dir --force-reinstall \
          "arxiv==2.2.0" \
          "openai==0.28.0" \
          "requests==2.32.4" \
          "python-dotenv==1.0.0" \
          "jinja2==3.1.2"
        
        echo "=== 📦 Packages after hardcoded installation ==="
        pip list --format=freeze
    
    - name: ✅ Strict version verification
      run: |
        echo "=== ✅ Verifying exact version matches ==="
        
        python -c "
        import pkg_resources
        import sys
        
        # 读取requirements.txt
        try:
            with open('requirements.txt', 'r') as f:
                requirements = [line.strip() for line in f.readlines() 
                              if line.strip() and not line.strip().startswith('#')]
        except FileNotFoundError:
            print('❌ requirements.txt not found!')
            sys.exit(1)
        
        print(f'📋 Found {len(requirements)} requirements to verify')
        
        # 获取当前安装的包
        installed = {pkg.project_name.lower(): pkg.version for pkg in pkg_resources.working_set}
        
        errors = []
        success = []
        
        for req in requirements:
            if '==' in req:
                pkg_name, expected_version = req.split('==', 1)
                pkg_name = pkg_name.strip().lower()
                expected_version = expected_version.strip()
                
                if pkg_name in installed:
                    actual_version = installed[pkg_name]
                    if actual_version == expected_version:
                        success.append(f'✅ {pkg_name}: {actual_version}')
                    else:
                        errors.append(f'❌ {pkg_name}: got {actual_version}, expected {expected_version}')
                else:
                    errors.append(f'❌ {pkg_name}: not installed')
        
        print('\n=== ✅ SUCCESSFUL MATCHES ===')
        for s in success:
            print(s)
        
        if errors:
            print(f'\n=== ❌ MISMATCHES ({len(errors)}) ===')
            for error in errors:
                print(error)
            
            print('\n=== 📦 ALL INSTALLED PACKAGES ===')
            for name, version in sorted(installed.items()):
                print(f'{name}=={version}')
            
            print(f'\n🚨 FAILURE: {len(errors)} version mismatches found!')
            sys.exit(1)
        else:
            print(f'\n🎉 SUCCESS: All {len(success)} packages match exactly!')
        "
    
    - name: Cache papers directory only
      uses: actions/cache@v4
      with:
        path: papers
        key: ${{ runner.os }}-papers-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-papers-
    
    - name: Run paper analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
        SMTP_PORT: ${{ secrets.SMTP_PORT }}
        SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
        SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
      run: |
        cd src
        python main.py
    
    - name: Commit and push changes
      run: |
        git config --global user.name 'TomasAndersonFang'
        git config --global user.email 'fangsen1996@gmail.com'
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update paper analysis for $(date +'%Y-%m-%d')"
          git push
        fi
